<?php

declare(strict_types=1);

namespace Tests\BitBag\SyliusMolliePlugin\PHPUnit\Functional\Api;

use BitBag\SyliusMolliePlugin\Client\MollieApiClient;
use Doctrine\ORM\EntityManagerInterface;
use Payum\Core\Model\Identity;
use Sylius\Component\Core\Model\Payment;
use Sylius\Component\Resource\Repository\RepositoryInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Tests\BitBag\SyliusMolliePlugin\PHPUnit\Functional\FunctionalTestCase;

final class RefundOrderWebhookTest extends FunctionalTestCase
{
    /** @var MollieApiClient */
    private $mollieApiClient;

    /** @var RepositoryInterface */
    private $securityTokenRepository;

    /** @var EntityManagerInterface */
    private $entityManager;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->mollieApiClient = self::getContainer()->get('bitbag_sylius_mollie_plugin.mollie_api_client');
        $this->mollieApiClient->setApiEndpoint('http://localhost:8217');
        $this->securityTokenRepository = self::getContainer()->get('sylius.repository.payment_security_token');
        $this->entityManager = self::getContainer()->get('doctrine.orm.entity_manager');
    }

    public function test_order_status_after_refund_with_credit_memos(): void
    {
        $fixtures = $this->loadFixturesFromFiles([
            'Api/RefundOrderWebhookTest/test_order_status_after_refund_with_credit_memos.yaml'
        ]);

        $paymentId = $fixtures['order_payment']->getId();

        $notifyToken = $this->securityTokenRepository->findOneBy(['hash' => $fixtures['notify_token']->getHash()]);
        $refundToken = $this->securityTokenRepository->findOneBy(['hash' => $fixtures['refund_token']->getHash()]);
        $notifyToken->setDetails(new Identity($paymentId, Payment::class));
        $refundToken->setDetails(new Identity($paymentId, Payment::class));

        $this->entityManager->flush();

        $this->request(
            Request::METHOD_POST,
            '/payment/notify/654fed',
            [],
            '',
            ['id' => 'ord_123xyz']
        );

        $response = $this->client->getResponse();

        die(var_dump($response->getContent()));

        $this->assertEquals(Response::HTTP_OK, $response->getStatusCode());
    }

    private function request(
        string $method,
        string $uri,
        array $server = [],
        string $requestBody = null,
        array $parameters = [],
        array $files = []
    ): void {
        $this->client->request($method, $uri, $parameters, $files, $server, $requestBody);
    }
}
